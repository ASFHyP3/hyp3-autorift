diff --git netcdf_output.py netcdf_output.py
--- netcdf_output.py
+++ netcdf_output.py
@@ -623,7 +623,7 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
         var.setncattr('stable_shift_stationary', int(round(vy_mean_shift*10))/10)
     else:
         var.setncattr('stable_shift_stationary', np.nan)
-        var.setncattr('stable_count_stationary', stable_count)
+    var.setncattr('stable_count_stationary', stable_count)
 
     if stable_count1 != 0:
         var.setncattr('stable_shift_slow', int(round(vy_mean_shift1*10))/10)
@@ -706,10 +706,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
                                            'as indicated in "stable_shift_flag"')
 
         if stable_count != 0:
-            var.setncattr('error_mask', int(round(vr_error_mask*10))/10)
+            var.setncattr('error_stationary', int(round(vr_error_mask*10))/10)
         else:
-            var.setncattr('error_mask', np.nan)
-        var.setncattr('error_mask_description', 'RMSE over stable surfaces, stationary or slow-flowing '
+            var.setncattr('error_stationary', np.nan)
+        var.setncattr('error_stationary_description', 'RMSE over stable surfaces, stationary or slow-flowing '
                                                 'surfaces with velocity < 15 meter/year identified from an external mask')
 
         var.setncattr('error_modeled', int(round(vr_error_mod*10))/10)
@@ -786,10 +786,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
                                            'as indicated in "stable_shift_flag"')
 
         if stable_count != 0:
-            var.setncattr('error_mask', int(round(va_error_mask*10))/10)
+            var.setncattr('error_stationary', int(round(va_error_mask*10))/10)
         else:
-            var.setncattr('error_mask', np.nan)
-        var.setncattr('error_mask_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces with velocity < 15 meter/year identified from an external mask')
+            var.setncattr('error_stationary', np.nan)
+        var.setncattr('error_stationary_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces with velocity < 15 meter/year identified from an external mask')
 
         var.setncattr('error_modeled', int(round(va_error_mod*10))/10)
         var.setncattr('error_modeled_description', '1-sigma error calculated using a modeled error-dt relationship')
@@ -814,10 +814,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
                                                        'velocities (second priority)')
 
         if stable_count != 0:
-            var.setncattr('stable_shift_mask', int(round(va_mean_shift*10))/10)
+            var.setncattr('stable_shift_stationary', int(round(va_mean_shift*10))/10)
         else:
-            var.setncattr('stable_shift_mask', np.nan)
-        var.setncattr('stable_count_mask', stable_count)
+            var.setncattr('stable_shift_stationary', np.nan)
+        var.setncattr('stable_count_stationary', stable_count)
 
         if stable_count1 != 0:
             var.setncattr('stable_shift_slow', int(round(va_mean_shift1*10))/10)
@@ -949,10 +949,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
         #                                    'indicated in "stable_shift_flag"')
         #
         # if stable_count_p != 0:
-        #     var.setncattr('error_mask', int(round(vxp_error_mask*10))/10)
+        #     var.setncattr('error_stationary', int(round(vxp_error_mask*10))/10)
         # else:
-        #     var.setncattr('error_mask', np.nan)
-        # var.setncattr('error_mask_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces '
+        #     var.setncattr('error_stationary', np.nan)
+        # var.setncattr('error_stationary_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces '
         #                                         'with velocity < 15 meter/year identified from an external mask')
         #
         # var.setncattr('error_modeled', int(round(vxp_error_mod * 10)) / 10)
@@ -978,10 +978,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
         #                                                'velocities (second priority)')
         #
         # if stable_count_p != 0:
-        #     var.setncattr('stable_shift_mask',int(round(vxp_mean_shift*10))/10)
+        #     var.setncattr('stable_shift_stationary',int(round(vxp_mean_shift*10))/10)
         # else:
-        #     var.setncattr('stable_shift_mask',np.nan)
-        # var.setncattr('stable_count_mask',stable_count_p)
+        #     var.setncattr('stable_shift_stationary',np.nan)
+        # var.setncattr('stable_count_stationary',stable_count_p)
         #
         # if stable_count1_p != 0:
         #     var.setncattr('stable_shift_slow',int(round(vxp_mean_shift1*10))/10)
@@ -1029,10 +1029,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
         #                                    'indicated in "stable_shift_flag"')
         #
         # if stable_count_p != 0:
-        #     var.setncattr('error_mask', int(round(vyp_error_mask*10))/10)
+        #     var.setncattr('error_stationary', int(round(vyp_error_mask*10))/10)
         # else:
-        #     var.setncattr('error_mask', np.nan)
-        # var.setncattr('error_mask_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces '
+        #     var.setncattr('error_stationary', np.nan)
+        # var.setncattr('error_stationary_description', 'RMSE over stable surfaces, stationary or slow-flowing surfaces '
         #                                         'with velocity < 15 meter/year identified from an external mask')
         #
         # var.setncattr('error_modeled', int(round(vyp_error_mod * 10)) / 10)
@@ -1058,10 +1058,10 @@ def netCDF_packaging(VX, VY, DX, DY, INTERPMASK, CHIPSIZEX, CHIPSIZEY, SSM, SSM1
         #                                                'velocities (second priority)')
         #
         # if stable_count_p != 0:
-        #     var.setncattr('stable_shift_mask', int(round(vyp_mean_shift*10))/10)
+        #     var.setncattr('stable_shift_stationary', int(round(vyp_mean_shift*10))/10)
         # else:
-        #     var.setncattr('stable_shift_mask', np.nan)
-        # var.setncattr('stable_count_mask', stable_count_p)
+        #     var.setncattr('stable_shift_stationary', np.nan)
+        # var.setncattr('stable_count_stationary', stable_count_p)
         #
         # if stable_count1_p != 0:
         #     var.setncattr('stable_shift_slow',int(round(vyp_mean_shift1*10))/10)

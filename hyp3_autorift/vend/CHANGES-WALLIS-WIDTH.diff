diff --git a/testautoRIFT.py b/testautoRIFT.py
index ade3d07..3cd09ef 100755
--- a/testautoRIFT.py
+++ b/testautoRIFT.py
@@ -127,7 +127,8 @@ def loadProductOptical(file_m, file_s):
 
 
 def runAutorift(I1, I2, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CSMAXx0, CSMAXy0, noDataMask, optflag,
-                nodata, mpflag, geogrid_run_info=None, preprocessing_methods=('hps', 'hps')):
+                nodata, mpflag, geogrid_run_info=None, preprocessing_methods=('hps', 'hps'),
+                preprocessing_filter_width=5):
     '''
     Wire and run geogrid.
     '''
@@ -142,6 +143,9 @@ def runAutorift(I1, I2, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CS
 
 
     obj = autoRIFT()
+
+    obj.WallisFilterWidth = preprocessing_filter_width
+
 #    obj.configure()
 
 #    ##########     uncomment if starting from preprocessed images
@@ -282,6 +286,7 @@ def runAutorift(I1, I2, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CS
     ######## preprocessing
     t1 = time.time()
     print("Pre-process Start!!!")
+    print(f"Using Wallis Filter Width: {obj.WallisFilterWidth}")
 #    obj.zeroMask = 1
 
     # TODO: Allow different filters to be applied images independently
@@ -509,6 +514,12 @@ def generateAutoriftProduct(indir_m, indir_s, grid_location, init_offset, search
         m_name = os.path.basename(indir_m)
         s_name = os.path.basename(indir_s)
 
+        # FIXME: Filter width is a magic variable here and not exposed well.
+        preprocessing_filter_width = 5
+        for ii, name in enumerate((m_name, s_name)):
+            if len(re.findall("S1[AB]_", name)) > 0:
+                preprocessing_filter_width = 21
+
         preprocessing_methods = ['hps', 'hps']
         for ii, name in enumerate((m_name, s_name)):
             if len(re.findall("L[EO]07_", name)) > 0:
@@ -521,6 +532,7 @@ def generateAutoriftProduct(indir_m, indir_s, grid_location, init_offset, search
         Dx, Dy, InterpMask, ChipSizeX, GridSpacingX, ScaleChipSizeY, SearchLimitX, SearchLimitY, origSize, noDataMask = runAutorift(
             data_m, data_s, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CSMAXx0, CSMAXy0,
             noDataMask, optical_flag, nodata, mpflag, geogrid_run_info=geogrid_run_info, preprocessing_methods=preprocessing_methods,
+            preprocessing_filter_width=preprocessing_filter_width,
         )
         if nc_sensor is not None:
             import netcdf_output as no
diff --git a/testautoRIFT_ISCE.py b/testautoRIFT_ISCE.py
index 7f8ed58..1712bfb 100755
--- a/testautoRIFT_ISCE.py
+++ b/testautoRIFT_ISCE.py
@@ -127,7 +127,8 @@ def loadProductOptical(file_m, file_s):
 
 
 def runAutorift(I1, I2, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CSMAXx0, CSMAXy0, noDataMask, optflag,
-                nodata, mpflag, geogrid_run_info=None, preprocessing_methods=('hps', 'hps')):
+                nodata, mpflag, geogrid_run_info=None, preprocessing_methods=('hps', 'hps'),
+                preprocessing_filter_width=5):
     '''
     Wire and run geogrid.
     '''
@@ -281,6 +282,7 @@ def runAutorift(I1, I2, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CS
     ######## preprocessing
     t1 = time.time()
     print("Pre-process Start!!!")
+    print(f"Using Wallis Filter Width: {obj.WallisFilterWidth}")
 #    obj.zeroMask = 1
 
     # TODO: Allow different filters to be applied images independently
@@ -508,6 +510,12 @@ def generateAutoriftProduct(indir_m, indir_s, grid_location, init_offset, search
         m_name = os.path.basename(indir_m)
         s_name = os.path.basename(indir_s)
 
+        # FIXME: Filter width is a magic variable here and not exposed well.
+        preprocessing_filter_width = 5
+        for ii, name in enumerate((m_name, s_name)):
+            if len(re.findall("S1[AB]_", name)) > 0:
+                preprocessing_filter_width = 21
+
         preprocessing_methods = ['hps', 'hps']
         for ii, name in enumerate((m_name, s_name)):
             if len(re.findall("L[EO]07_", name)) > 0:
@@ -520,6 +528,7 @@ def generateAutoriftProduct(indir_m, indir_s, grid_location, init_offset, search
         Dx, Dy, InterpMask, ChipSizeX, GridSpacingX, ScaleChipSizeY, SearchLimitX, SearchLimitY, origSize, noDataMask = runAutorift(
             data_m, data_s, xGrid, yGrid, Dx0, Dy0, SRx0, SRy0, CSMINx0, CSMINy0, CSMAXx0, CSMAXy0,
             noDataMask, optical_flag, nodata, mpflag, geogrid_run_info=geogrid_run_info, preprocessing_methods=preprocessing_methods,
+            preprocessing_filter_width=preprocessing_filter_width,
         )
         if nc_sensor is not None:
             import netcdf_output as no
